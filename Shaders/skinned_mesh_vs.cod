//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world_inverse_transpose;// Offset:   64 Size:    64 [unused]
//   float4 material_color;             // Offset:  128 Size:    16 [unused]
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//   row_major float4x4 bone_transforms[32];// Offset:  160 Size:  2048
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[138], dynamicIndexed
dcl_input v0.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 7 "C:\Users\2190144\Desktop\MGE\Shaders\skinned_mesh_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 9
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- p.x; r1.y <- p.y; r1.z <- p.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(4)
  breakc_z r2.x

#line 11
  dp4 r2.x, v3.xyzw, icb[r1.w + 0].xyzw
  and r3.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r2.yz, r3.yywy, r3.xxzx
  or r2.y, r2.z, r2.y
  imul null, r2.y, r2.y, l(4)
  mul r3.xyz, v0.xxxx, cb0[r2.y + 10].xyzx
  mul r4.xyz, v0.yyyy, cb0[r2.y + 11].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb0[r2.y + 12].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, v0.wwww, cb0[r2.y + 13].xxyz
  add r2.yzw, r2.yyzw, r3.xxyz
  mul r2.xyz, r2.yzwy, r2.xxxx
  add r1.xyz, r1.xyzx, r2.xyzx

#line 13
  iadd r1.w, r1.w, l(1)
endloop 

#line 14
mov r1.xyz, r1.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
mov r0.x, l(1.000000)  // r0.x <- position.w

#line 18
mul r2.xyzw, r1.xxxx, cb0[0].xyzw
mul r3.xyzw, r1.yyyy, cb0[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 28
itof r1.xyzw, l(0, 0, 0, 1)  // r1.x <- influence.x; r1.y <- influence.y; r1.z <- influence.z; r1.w <- influence.w

#line 29
mov r2.x, l(0)  // r2.x <- j
mov r3.yzw, r1.xxyz  // r3.y <- influence.x; r3.z <- influence.y; r3.w <- influence.z
mov r3.x, r2.x  // r3.x <- j
loop 
  ilt r2.y, r3.x, l(4)
  breakc_z r2.y

#line 31
  dp4 r2.y, v3.xyzw, icb[r3.x + 0].xyzw  // r2.y <- weight

#line 32
  lt r2.z, l(0.000000), r2.y
  if_nz r2.z

#line 34
    and r4.xyzw, v4.xyzw, icb[r3.x + 4].xyzw
    or r2.zw, r4.yyyw, r4.xxxz
    or r2.z, r2.w, r2.z
    switch r2.z

#line 36
      case l(0)

#line 37
      mov r3.y, r2.y

#line 38
      break 

#line 39
      case l(1)

#line 40
      mov r3.z, r2.y

#line 41
      mov r3.yzw, r3.yyzw
      break 

#line 42
      case l(2)

#line 43
      mov r3.w, r2.y

#line 44
      break 

#line 45
      default 
      break 
    endswitch 

#line 46
  endif 

#line 47
  iadd r3.x, r3.x, l(1)
endloop 
mov r1.x, r3.y  // r1.x <- influence.x
mov r1.y, r3.z  // r1.y <- influence.y
mov r1.z, r3.w  // r1.z <- influence.z

#line 48
mov r1.x, r1.x  // r1.x <- vout.color.x
mov r1.y, r1.y  // r1.y <- vout.color.y
mov r1.z, r1.z  // r1.z <- vout.color.z
mov r1.w, r1.w  // r1.w <- vout.color.w

#line 51
mov r2.xy, v2.xyxx  // r2.x <- vout.texcoord.x; r2.y <- vout.texcoord.y

#line 53
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xy, r2.xyxx
ret 
// Approximately 74 instruction slots used
